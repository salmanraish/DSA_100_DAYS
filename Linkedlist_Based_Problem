EASY_PROBLEMS

1. Reverse Linked List(LeetCode)
Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000
 
Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?


Code:- I.) ITRATIVE APPROACH(LeetCode Problem Code)

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode prev = head;
        ListNode curr = head.next;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head.next = null;
        return head = prev;
    }
}

II.) RECURSIVE APPROACH(LeetCode Problem Code)

class Solution {
    public ListNode reverseList(ListNode head) { 
        if(head == null || head.next == null){
            return head;
        }

        Node NewNode = reverseRecursive(head.next);
        head.next.next = head;
        head.next = null;
        return NewNode;
   }
}

2. Linked List Cycle(LeetCode)
Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1: 
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

Constraints:
The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 
Follow up: Can you solve it using O(1) (i.e. constant) memory?

Code:- public class Solution {
    public boolean hasCycle(ListNode head) {
    if(head == null || head.next == null){
        return false;
    }
    ListNode fast = head;
    ListNode slow = head;
    while(fast != null && fast.next !=null){  // USING Floydâ€™s cycle finding algorithm
        fast = fast.next.next;
        slow = slow.next;
        if(fast == slow){
            return true;
        }
    }
    return false;
    }
}

3. 
